#-----------------------------------------------------------------------------
#
# IRTKConfig.cmake - IRTK CMake configuration file for external projects.
#
# SETS
# IRTK_INCLUDE_DIRS -- all include directories
# IRTK_LIBRARIES_DIR -- the directory for the linrary in the built tree
# IRTK_LIBRARIES -- the name of the IRTK libraries

# The IRTK include file directories.
SET(IRTK_SOURCE_DIR "@IRTK_SOURCE_DIR@")

SET(IRTK_INCLUDE_DIRS "@IRTK_INCLUDE_DIRS@")

SET(IRTK_LIBRARIES_DIR "@IRTK_LIBRARIES_DIR@") 

SET(IRTK_LIBRARIES segmentation++ registration2++ registration++ transformation++ contrib++
image++ geometry++ common++) 

IF (@BUILD_CONDOR_EXE_FLAG@)
   SET (CMAKE_X_LIBS "-lGL -L/usr/X11R6/lib -lm -lXext -lXt -lSM -lX11  -lICE -ldl -lnsl")
   SET (CMAKE_MODULE_LINK_FLAGS "-static")
   SET (CMAKE_SHLIB_LINK_FLAGS "-static")
ENDIF (@BUILD_CONDOR_EXE_FLAG@)

IF (@BUILD_WITH_OPENCV_FLAG@)
  ADD_DEFINITIONS(-DHAS_OPENCV)
  SET(OPENCV_DIR "" CACHE PATH "Path to where OpenCv is installed")
  SET(OPENCV_INCLUDE_DIR "" CACHE PATH "Path to where OpenCv's include files")
  SET(OPENCV_CV_INCLUDE_DIR ${OPENCV_INCLUDE_DIR}/include/opencv)
  SET(OPENCV_CV_INCLUDESRC_DIR ${OPENCV_INCLUDE_DIR}/src/cv)
  SET(OPENCV_LIB_DIR ${OPENCV_DIR}/lib)
  INCLUDE_DIRECTORIES(${OPENCV_CV_INCLUDE_DIR})
  INCLUDE_DIRECTORIES(${OPENCV_CV_INCLUDESRC_DIR})
  FIND_LIBRARY(CV_LINUX_LIBRARY 
		NAMES cv 
		PATHS ${OPENCV_LIB_DIR} )
  FIND_LIBRARY(CV_WINDOWS_LIBRARY 
		NAMES cv200 
		PATHS ${OPENCV_LIB_DIR}/release )
  IF(CV_LINUX_LIBRARY)
      SET(CV_LIBRARYS cv)
      SET(CV_LIBRARYS ${CV_LIBRARYS} cvaux)
      SET(CV_LIBRARYS ${CV_LIBRARYS} cxcore)
      SET(CV_LIBRARYS ${CV_LIBRARYS} highgui)
      SET(CV_LIBRARYS ${CV_LIBRARYS} ml)
  ENDIF(CV_LINUX_LIBRARY)
  IF(CV_WINDOWS_LIBRARY)
      SET(OPENCV_LIB_DIR ${OPENCV_LIB_DIR}/release)
      SET(CV_LIBRARYS cvhaartraining)
      SET(CV_LIBRARYS ${CV_LIBRARYS} cv200)
      SET(CV_LIBRARYS ${CV_LIBRARYS} cvaux200)
      SET(CV_LIBRARYS ${CV_LIBRARYS} cxcore200)
      SET(CV_LIBRARYS ${CV_LIBRARYS} highgui200)
      SET(CV_LIBRARYS ${CV_LIBRARYS} ml200)
  ENDIF(CV_WINDOWS_LIBRARY)
  LINK_DIRECTORIES(${OPENCV_LIB_DIR})
  SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} ${CV_LIBRARYS})
ENDIF (@BUILD_WITH_OPENCV_FLAG@)

IF (@BUILD_WITH_TBB_FLAG@)
   ADD_DEFINITIONS(-DHAS_TBB)
   SET(TBB_DIR "" CACHE PATH "Path to where TBB is installed")
   SET(TBB_INCLUDE_DIR ${TBB_DIR}/include)
   SET(TBB_LIB_DIR ${TBB_DIR}/lib)
   INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIR})
   LINK_DIRECTORIES(${TBB_LIB_DIR})
   SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} tbb)
ENDIF(@BUILD_WITH_TBB_FLAG@)

IF (@ZLIB_FOUND_FLAG@)
  ADD_DEFINITIONS(-DHAS_ZLIB)
  INCLUDE_DIRECTORIES(@ZLIB_INCLUDE_DIR@)
  SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} @ZLIB_LIBRARIES@)
ENDIF (@ZLIB_FOUND_FLAG@)

IF (@FLTK_INCLUDE_DIR_FLAG@)
  INCLUDE_DIRECTORIES(${FLTK_INCLUDE_DIR})
  FIND_FILE(FLTK_REZ_FILE mac.r ${FLTK_INCLUDE_DIR})
ENDIF(@FLTK_INCLUDE_DIR_FLAG@)

# Options to build with nifti, znz and possibly fslio
IF(@BUILD_WITH_NIFTI_FLAG@)
   ADD_DEFINITIONS(-DHAS_NIFTI)
   INCLUDE_DIRECTORIES(${IRTK_SOURCE_DIR}/nifti/niftilib)
   INCLUDE_DIRECTORIES(${IRTK_SOURCE_DIR}/nifti/znzlib)
   SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} znz)
   SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} niftiio)
ENDIF(@BUILD_WITH_NIFTI_FLAG@)

# Option to build with cardiac spatial temporal correction, segmentation and motion tracking toolbox.
IF (@BUILD_CARDIAC_FLAG@)
   ADD_DEFINITIONS(-DHAS_CARDIAC)
   INCLUDE_DIRECTORIES(${IRTK_SOURCE_DIR}/packages/cardiac/include)
   SET(IRTK_LIBRARIES ${IRTK_LIBRARIES} cardiac++)
ENDIF(@BUILD_CARDIAC_FLAG@)


IF (BUILD_CONDOR_EXE_FLAG)

   INCLUDE (${CMAKE_ROOT}/Modules/FindGLUT.cmake)

   IF (GLUT_INCLUDE_PATH)
      INCLUDE_DIRECTORIES(${GLUT_INCLUDE_PATH})
   ENDIF(GLUT_INCLUDE_PATH)

   IF (GLUT_LIBRARY)
      LINK_LIBRARIES (${GLUT_LIBRARY})
   ENDIF (GLUT_LIBRARY)

   INCLUDE (${CMAKE_ROOT}/Modules/FindOpenGL.cmake)

   IF (GLU_LIBRARY)
      LINK_LIBRARIES (${GLU_LIBRARY})
   ENDIF (GLU_LIBRARY)
 
   IF (OPENGL_INCLUDE_PATH)
      INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_PATH})
   ENDIF(OPENGL_INCLUDE_PATH)

   IF (OPENGL_LIBRARY)
      LINK_LIBRARIES (${OPENGL_LIBRARY})
   ENDIF (OPENGL_LIBRARY)

ENDIF (BUILD_CONDOR_EXE_FLAG)

INCLUDE (${CMAKE_ROOT}/Modules/Dart.cmake)

IF (WIN32)
  #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /TP /Ze /W0")
  ADD_DEFINITIONS(-DvtkCommon_EXPORTS)
ELSE (WIN32)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffloat-store -Wall -O2 -Wno-deprecated -Wno-write-strings")
ENDIF (WIN32)

IF (@WRAP_PYTHON_FLAG@)
  SET(ENABLE_WRAPPING TRUE)
  INCLUDE(${CMAKE_ROOT}/Modules/FindPythonLibs.cmake)
ENDIF (@WRAP_PYTHON_FLAG@)

IF (ENABLE_WRAPPING)
  INCLUDE(${CMAKE_ROOT}/Modules/FindSWIG.cmake)
  IF (SWIG_FOUND)
    INCLUDE(${SWIG_USE_FILE})  
  ENDIF (SWIG_FOUND)
ENDIF (ENABLE_WRAPPING)

ADD_DEFINITIONS(-DIMPERIAL -DANSI -DHAS_CONTRIB -DNO_BOUNDS -DENABLE_UNIX_COMPRESS)

IF (@BUILD_WITH_PNG_FLAG@)
  ADD_DEFINITIONS(-DHAS_PNG)
  INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
  LINK_LIBRARIES(${PNG_LIBRARIES})
ENDIF (@BUILD_WITH_PNG_FLAG@)


IF (@BUILD_WITH_VTK_FLAG@)
   # Add VTK
   INCLUDE(${CMAKE_ROOT}/Modules/FindVTK.cmake)

   IF (VTK_FOUND)
      ADD_DEFINITIONS(-DHAS_VTK)
      INCLUDE_DIRECTORIES(${VTK_INCLUDE_DIRS})
      LINK_DIRECTORIES(${VTK_LIBRARY_DIRS})

      # Add patented library if available
      IF (VTK_KITS MATCHES "PATENTED")
         ADD_DEFINITIONS(-DHAS_VTK_PATENTED)
	  LINK_LIBRARIES (vtkPatented)
      ENDIF (VTK_KITS MATCHES "PATENTED")

       # Add patented library if available
      IF (VTK_KITS MATCHES "HYBRID")
         ADD_DEFINITIONS(-DHAS_VTK_HYBRID)
	 LINK_LIBRARIES (vtkHybrid)
      ENDIF (VTK_KITS MATCHES "HYBRID")

     LINK_LIBRARIES (vtkRendering vtkImaging
      vtkGraphics vtkFiltering vtkIO vtkCommon)
   ENDIF (VTK_FOUND)
ENDIF (@BUILD_WITH_VTK_FLAG@)
